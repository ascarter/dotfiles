#!/bin/sh

# set -x

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
DOTFILES=${DOTFILES:-${XDG_CONFIG_HOME}/dotfiles}
DOTFILES_CONFIG_DIR=${DOTFILES}/config
DOTFILES_PACKAGE_DIR=${DOTFILES}/packages
TARGET=${TARGET:-$HOME}

source ${DOTFILES}/share/dotfiles/libdf.sh

usage() {
  log "Usage" "dotfiles [options] <subcommand>"
  log ""
  log "Subcommands:"
  log "  init" "Initialize dotfiles"
  log "  package" "Package management"
  log "  list" "Show configuration status"
  log "  sync" "Sync [package]"
  log "  unlink" "Unlink configuration"
  log "  update" "Update configuration"
  log ""
  log "Package usage:"
  log "  dotfiles package [options] <subcommand> <package>"
  log "Package subcommands:"
  log "  install" "Install package"
  log "  uninstall" "Uninstall package"
  log "  list" "Show package status"
  log ""
  log "Options:"
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

check_symlink() {
  # Try `realpath` (works on both macOS and Linux if installed)
  if command -v realpath >/dev/null 2>&1; then
    link_target=$(realpath "$1")
  else
    # Fallback to `readlink` for macOS and Linux
    link_target=$(cd "$(dirname "$1")" && cd "$(readlink "$1")" && pwd)
  fi
  if [ "$2" = "$link_target" ]; then
    return 0
  else
    return 1
  fi
}

# Sync configuration files from source to target directory
# $1: source directory
# $2: target directory
# $3: action
#  list: check status
#  link: link source to target
#  unlink: unlink target
#  adopt: adopt target
sync() {
  source_dir="${1}"
  target_dir="${2}"
  action="${3}"

  vlog "source_dir" "${source_dir}"
  vlog "target_dir" "${target_dir}"
  vlog "action" "${action}"

  find "${source_dir}" -type f | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    vlog "target_file" "${target_file}"
  if [ "${action}" = "list" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          dlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
      elif [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
      else
        dlog "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          dlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
        continue
      elif [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      dlog "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        dlog "unlink" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "adopt" ]; then
      if [ -e "${target_file}" ]; then
        mv "${target_file}" "${source_file}"
        ln -sf "${source_file}" "${target_file}"
        dlog "adopt" "${target_file} -> ${source_file}"
      fi
    fi
  done
}

package() {
  if [ $# -eq 0 ]; then
    echo "No action specified"
    echo ""
    usage
    exit 1
  fi

  action=$1
  shift
  vlog "package" ${action}

  # Verify action is install | uninstall | list
  if [ "${action}" != "install" ] && [ "${action}" != "uninstall" ] && [ "${action}" != "list" ]; then
    err "invalid action"
    exit 1
  fi

  packages="${@}"

  # If no package specified, use all packages
  if [ -z "${packages}" ]; then
    packages=$(find "${DOTFILES_PACKAGE_DIR}" -mindepth 1 -maxdepth 1 -type f -name '*.sh' -exec basename {} .sh \; | sort)
  fi

  for package in ${packages}; do
    vlog "package" ${package}
    package_script="${DOTFILES_PACKAGE_DIR}/${package}.sh"
    if [ -f "${package_script}" ]; then
      vlog ${package} ${action}
      sh -c "source ${DOTFILES}/share/dotfiles/libdf.sh && source ${package_script} && ${action}"
    else
      err "${package} ${action} script not found"
      continue
    fi
  done
}

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

vlog "ID" ${ID}
vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

# Handle subcommands and pass remaining paramters
if [ $# -eq 0 ]; then
  echo "No subcommand specified"
  echo ""
  usage
  exit 1
fi

subcommand=$1
shift

vlog "command" $subcommand
vlog "dotfiles" ${DOTFILES}
vlog "target" ${TARGET}

case ${subcommand} in
init)
  tlog "prereqs" "${ID}"
  prereqs
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"

  log "dotfiles initialized"
  ;;
package)
  package "$@"
  ;;
list)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "list"
  package list "$@"
  ;;
sync)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "adopt"
  ;;
unlink)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "unlink"
  ;;
update)
  git -C ${DOTFILES} pull
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"
  update_completions
  ;;
*) usage && exit 1 ;;
esac
