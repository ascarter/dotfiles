!/bin/sh

# set -x

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
LOCAL_BIN_HOME=${LOCAL_BIN_HOME:-$HOME/.local/bin}
DOTFILES=${DOTFILES:-${XDG_DATA_HOME}/dotfiles}
DOTFILES_BIN=${DOTFILES}/bin
DOTFILES_SCRIPTS=${DOTFILES}/scripts
DOTFILES_CONFIG=${XDG_CONFIG_HOME}/dotfiles

dotfiles_command=${DOTFILES_BIN}/dotfiles

TARGET=${TARGET:-$HOME}
VERBOSE=0

# Files and patterns to exclude from linking
EXCLUDE_PATTERNS=".DS_Store Thumbs.db *.tmp .gitkeep"

log() {
  if [ "$#" -eq 1 ]; then
    printf "%s\n" "$1"
  elif [ "$#" -gt 1 ]; then
    printf "$(tput bold)%-10s$(tput sgr0)\t%s\n" "$1" "$2"
  fi
}

# verbose log
vlog() {
  if [ $VERBOSE -eq 1 ]; then
    log "$@"
  fi
}

err() {
  echo "$*" >&2
}

usage() {
  log "dotfiles" "Configuration management tool using symlinks"
  log ""
  log "Usage:" "dotfiles [options] <command>"
  log ""
  log "Commands:" ""
  log "  shellenv" "Export configuration for dotfiles"
  log "  status" "Show configuration status"
  log "  init" "Init dotfiles for shells"
  log "  link" "Link configuration"
  log "  unlink" "Unlink configuration"
  log "  update" "Update dotfiles"
  log "  edit" "Edit dotfiles in $EDITOR"
  log "  script" "Run dotfiles provisioning script [script1 script2 -- args]"
  log ""
  log "Options:" ""
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

check_symlink() {
  # Try `realpath` (works on both macOS and Linux if installed)
  if command -v realpath >/dev/null 2>&1; then
    link_target=$(realpath "$1")
    link_src=$(realpath "$2")
  else
    # Fallback to `readlink` for macOS and Linux
    link_target=$(cd "$(dirname "$1")" && cd "$(readlink "$1")" && pwd)
    link_src=$(cd "$(dirname "$2")" && cd "$(readlink "$2")" && pwd)
  fi
  if [ "$link_src" = "$link_target" ]; then
    return 0
  else
    return 1
  fi
}

# Check if directory is empty and remove it
remove_empty_dir() {
  if ! [ -d "${1}" ]; then
    vlog "missing" "${1}"
  elif [ -z "$(ls -A "${1}")" ]; then
    log "rm" "${1}"
    rmdir "${1}"
  else
    vlog "not empty" "${1}"
  fi
}

shellenv() {
  printf 'export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}\n'
  printf 'export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n'
  printf 'export XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}\n'
  printf 'export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}\n'
  printf 'export LOCAL_BIN_HOME=${LOCAL_BIN_HOME:-$HOME/.local/bin}\n'
  printf 'export DOTFILES=${DOTFILES:-$XDG_DATA_HOME/dotfiles}\n'
  printf 'export DOTFILES_CONFIG=${DOTFILES_CONFIG:-$XDG_CONFIG_HOME/dotfiles}\n'
  printf 'export PATH=${LOCAL_BIN_HOME}:${DOTFILES}/bin:$PATH\n'
  printf '[ -f ${DOTFILES}/etc/profile ] && . ${DOTFILES}/etc/profile'
}

write_config() {
  if grep -q "dotfiles shellenv" "$1" 2>/dev/null; then
    vlog "skip" "$1"
    return 0
  fi
  mkdir -p "${1%/*}"
  printf '\n# Added by `dotfiles init` on %s\n%s\n' "$(date)" "$2" >>"$1"
  log "added" "$1"
}

# Initialize shell integration
init() {
  for shell in $(grep -o -E '(bash|zsh)$' /etc/shells | sort -u); do
    case $shell in
    bash)
      profile="${HOME}/.bashrc"
      ;;
    zsh)
      profile="${ZDOTDIR:-$HOME}/.zshrc"
      ;;
    esac
    if [ -n "$profile" ]; then
      write_config "$profile" "eval \"\$($dotfiles_command shellenv)\""
    fi
  done
}

# Sync configuration files from source to target directory
# $1: action
#  list: check status
#  link: link source to target
#  unlink: unlink target
sync() {
  source_dir="${DOTFILES}/src"
  target_dir="${TARGET}"
  action="${1}"

  # Build find command with exclude patterns
  find_cmd="find \"${source_dir}\" -type f"
  for pattern in ${EXCLUDE_PATTERNS}; do
    find_cmd="${find_cmd} -not -name \"${pattern}\""
  done

  eval "${find_cmd}" | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    if [ "${action}" = "list" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
      else
        log "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
        continue
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      log "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        log "unlink" "${target_file} -> ${source_file}"
      fi
      remove_empty_dir "$(dirname "${target_file}")"
    fi
  done
}

# Update dotfiles with smart change detection
update() {
  # Fetch latest changes from remote
  log "fetch" "Fetching latest changes from remote"
  if ! git -C "${DOTFILES}" fetch origin; then
    err "Failed to fetch from remote"
    return 1
  fi

  # Get current branch (assume main/master)
  current_branch=$(git -C "${DOTFILES}" rev-parse --abbrev-ref HEAD)
  remote_branch="origin/${current_branch}"

  # Check if remote branch exists
  if ! git -C "${DOTFILES}" rev-parse --verify "${remote_branch}" >/dev/null 2>&1; then
    err "Remote branch ${remote_branch} not found"
    return 1
  fi

  # Check if there are differences between local and remote
  local_commit=$(git -C "${DOTFILES}" rev-parse HEAD)
  remote_commit=$(git -C "${DOTFILES}" rev-parse "${remote_branch}")

  if [ "${local_commit}" = "${remote_commit}" ]; then
    log "up-to-date" "No changes from remote"
    return 0
  fi

  log "changes" "Detected changes from remote, updating..."

  # Unlink everything before updating (in case files were removed)
  sync "unlink"

  # Update local branch to match remote
  if ! git -C "${DOTFILES}" reset --hard "${remote_branch}"; then
    err "Failed to update local branch"
    return 1
  fi

  # Reinitialize shell integration
  init

  # Re-install links
  sync "link"

  log "updated" "Successfully updated dotfiles"
}

# Run provisioning scripts from scripts directory
run_script() {
  # If no scripts provided, list all available
  if [ $# -eq 0 ]; then
    log "Available scripts:"
    for script in "${DOTFILES_SCRIPTS}"/*.sh; do
      if [ -f "${script}" ]; then
        script_name=$(basename "${script}" .sh)
        log "  ${script_name}"
      fi
    done
    return 0
  fi

  # Parse arguments to find -- separator
  script_names=""
  script_args=""
  found_separator=0

  for arg in "$@"; do
    if [ "$arg" = "--" ]; then
      found_separator=1
      continue
    fi

    if [ $found_separator -eq 0 ]; then
      script_names="$script_names $arg"
    else
      script_args="$script_args $arg"
    fi
  done

  # If no separator found, treat all args as script names (backward compatibility)
  if [ $found_separator -eq 0 ]; then
    script_names="$@"
    script_args=""
  fi

  # Run each script with the provided arguments
  for script in $script_names; do
    script_path="${DOTFILES_SCRIPTS}/${script}.sh"
    if [ -f "${script_path}" ]; then
      log "Running" "${script}"
      # Execute script with proper terminal I/O for interaction
      sh "${script_path}" $script_args </dev/tty
    else
      err "Script not found: ${script}.sh"
    fi
  done
}

# ------------------------------
# main
# ------------------------------

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $((OPTIND - 1))

vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

case ${1} in
shellenv)
  shellenv
  ;;
status)
  VERBOSE=1
  sync "list"
  ;;
init)
  init
  ;;
link)
  sync "link"
  ;;
unlink)
  sync "unlink"
  ;;
update)
  update
  ;;
edit)
  ${EDITOR} ${DOTFILES}
  ;;
script)
  # Pass remaining arguments to script function
  shift
  run_script "$@"
  ;;
*)
  # No command - show help
  ${0} --help
  exit 1
  ;;
esac

# vim: set ft=sh ts=2 sw=2 et:
