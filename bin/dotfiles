#!/bin/sh

# set -x

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}
LOCAL_BIN_HOME=${LOCAL_BIN_HOME:-$HOME/.local/bin}
DOTFILES=${DOTFILES:-${XDG_DATA_HOME}/dotfiles}
DOTFILES_LIB=${DOTFILES}/lib

dotfiles_command=$LOCAL_BIN_HOME/dotfiles

TARGET=${TARGET:-$HOME}
VERBOSE=0

log() {
  if [ "$#" -eq 1 ]; then
    printf "%s\n" "$1"
  elif [ "$#" -gt 1 ]; then
    printf "$(tput bold)%-10s$(tput sgr0)\t%s\n" "$1" "$2"
  fi
}

# verbose log
vlog() {
  if [ $VERBOSE -eq 1 ]; then
    log "$@"
  fi
}

usage() {
  log "dotfiles" "Configuration management tool using symlinks"
  log ""
  log "Usage:" "dotfiles [options] <command>"
  log ""
  log "Commands:" ""
  log "  shellenv" "Export configuration for dotfiles"
  log "  status" "Show configuration status"
  log "  init" "Init dotfiles for shells"
  log "  link" "Link configuration"
  log "  unlink" "Unlink configuration"
  log "  update" "Update dotfiles"
  log "  edit" "Edit dotfiles in $EDITOR"
  log "  pkg" "<install|uninstall|info|doctor> <pkg>"
  log ""
  log "Options:" ""
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

check_symlink() {
  # Try `realpath` (works on both macOS and Linux if installed)
  if command -v realpath >/dev/null 2>&1; then
    link_target=$(realpath "$1")
  else
    # Fallback to `readlink` for macOS and Linux
    link_target=$(cd "$(dirname "$1")" && cd "$(readlink "$1")" && pwd)
  fi
  if [ "$2" = "$link_target" ]; then
    return 0
  else
    return 1
  fi
}

# Check if directory is empty and remove it
remove_empty_dir() {
  if ! [ -d "${1}" ]; then
    vlog "missing" "${1}"
  elif [ -z "$(ls -A "${1}")" ]; then
    log "rm" "${1}"
    rmdir "${1}"
  else
    vlog "not empty" "${1}"
  fi
}

shellenv() {
  printf 'export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}\n'
  printf 'export XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}\n'
  printf 'export XDG_STATE_HOME=${XDG_STATE_HOME:-$HOME/.local/state}\n'
  printf 'export XDG_CACHE_HOME=${XDG_CACHE_HOME:-$HOME/.cache}\n'
  printf 'export LOCAL_BIN_HOME=${LOCAL_BIN_HOME:-$HOME/.local/bin}\n'
  printf 'export DOTFILES=${DOTFILES:-$XDG_DATA_HOME/dotfiles}\n'
  printf 'export PATH=$LOCAL_BIN_HOME:$PATH\n'
  printf '[ -f ${DOTFILES}/etc/profile ] && . ${DOTFILES}/etc/profile'
}

write_config() {
  if grep -q "dotfiles shellenv" "$1" 2>/dev/null; then
    vlog "skip" "$1"
    return 0
  fi
  mkdir -p "${1%/*}"
  printf '\n# Added by `dotfiles init` on %s\n%s\n' "$(date)" "$2" >>"$1"
  log "added" "$1"
}

# Initialize shell integration
init() {
  for shell in $(grep -o -E '(bash|zsh)$' /etc/shells | sort -u); do
    case $shell in
    bash)
      profile="${HOME}/.bashrc"
      ;;
    zsh)
      profile="${ZDOTDIR:-$HOME}/.zshrc"
      ;;
    esac
    if [ -n "$profile" ]; then
      write_config "$profile" "eval \"\$($dotfiles_command shellenv)\""
    fi
  done
}

# Sync configuration files from source to target directory
# $1: action
#  list: check status
#  link: link source to target
#  unlink: unlink target
sync() {
  source_dir="${DOTFILES}/src"
  target_dir="${TARGET}"
  action="${1}"

  find "${source_dir}" -type f | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    if [ "${action}" = "list" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
      else
        log "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
        continue
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      log "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        log "unlink" "${target_file} -> ${source_file}"
      fi
      remove_empty_dir "$(dirname "${target_file}")"
    fi
  done
}

pkg() {
  action=$1
  package=$2
  pkg_script=${DOTFILES_LIB}/packages/$package.sh

  case "$action" in
  doctor | install | uninstall | info)
    if [ -f ${pkg_script} ]; then
      log "$action" "$package"
      . ${DOTFILES_LIB}/packages/$package.sh
      $action
    else
      log "missing" "$package"
    fi
    ;;
  *)
    # List all packages in lib/packages (basename without .sh extension)
    for pkg in ${DOTFILES_LIB}/packages/*.sh; do
      name=${pkg##*/}
      log "${name%.sh}"
    done
    ;;
  esac
}

# ------------------------------
# main
# ------------------------------

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $((OPTIND - 1))

vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

case ${1} in
shellenv)
  shellenv
  ;;
status)
  sync "list"
  ;;
init)
  init
  ;;
link)
  sync "link"
  ;;
unlink)
  sync "unlink"
  ;;
update)
  # Unlink everything in case files were removed
  sync "unlink"

  # Update git repo
  git -C ${DOTFILES} pull

  # Init shell integration
  init

  # Re-install links
  sync "link"
  ;;
edit)
  ${EDITOR} ${DOTFILES}
  ;;
pkg)
  shift
  pkg $1 $2
  ;;
*)
  # No command - show help
  ${0} --help
  exit 1
  ;;
esac

# vim: set ft=sh ts=2 sw=2 et:
