#!/bin/sh

# set -x

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

DOTFILES=${DOTFILES:-${XDG_DATA_HOME}/dotfiles}
DOTFILES_CONFIG_DIR=${DOTFILES}/cfg
DOTFILES_LIB_DIR=${DOTFILES}/lib

TARGET=${TARGET:-$HOME}
VERBOSE=0

echo $DOTFILES
echo $DOTFILES_CONFIG_DIR
echo $DOTFILES_LIB_DIR

# Source all lib fils
if [ -d "${DOTFILES_LIB_DIR}" ]; then
  for lib in ${DOTFILES_LIB_DIR}/*.sh; do
    if [ -f "${lib}" ]; then
      source "${lib}"
    fi
  done
else
  err "lib directory not found"
fi
exit 1
usage() {
  log "dotfiles" "Configuration management tool using symlinks"
  log ""
  log "Usage:" "dotfiles [options] <command>"
  log ""
  log "Commands:" ""
  log "  init" "Initialize dotfiles"
  log "  list" "Show configuration status"
  log "  adopt" "Add changed configuration files"
  log "  unlink" "Unlink configuration"
  log "  update" "Update configuration"
  log ""
  log "Options:" ""
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

reqs() {
  case "${ID}" in
  "macos") macos_reqs ;;
  "fedora") fedora_reqs ;;
  "ubuntu") ubuntu_reqs ;;
  esac

  mise_install
  op_plugins_install
  gh_extensions_install
}

# Generate completions
update_completions() {
  local completion_dir="${1:-$HOME/.local/share/zsh/functions}"
  local tools
  local tools_cmds

  tools=(
    usage
    mise
    docker
    rustup
    cargo
  )
  tool_cmds=(
    "usage --completions zsh"
    "mise completion zsh"
    "docker completion zsh"
    "rustup completions zsh"
    "rustup completions zsh cargo"
  )

  local tool
  local tool_cmd
  local tool_completion

  mkdir -p ${completion_dir}
  tlog "update" "completions"
  for i in "${!tools[@]}"; do
    tool="${tools[$i]}"
    tool_cmd="${tool_cmds[$i]}"
    tool_completion="_${tool}"

    if command -v ${tool} >/dev/null 2>&1; then
      dlog "completion" "${tool}"
      eval "${tool_cmd}" > "${completion_dir}/${tool_completion}"
    else
      dlog "missing" "${tool}"
    fi
  done
}

check_symlink() {
  # Try `realpath` (works on both macOS and Linux if installed)
  if command -v realpath >/dev/null 2>&1; then
    link_target=$(realpath "$1")
  else
    # Fallback to `readlink` for macOS and Linux
    link_target=$(cd "$(dirname "$1")" && cd "$(readlink "$1")" && pwd)
  fi
  if [ "$2" = "$link_target" ]; then
    return 0
  else
    return 1
  fi
}

# Sync configuration files from source to target directory
# $1: source directory
# $2: target directory
# $3: action
#  list: check status
#  link: link source to target
#  unlink: unlink target
#  adopt: adopt target
sync() {
  source_dir="${1}"
  target_dir="${2}"
  action="${3}"

  vlog "source_dir" "${source_dir}"
  vlog "target_dir" "${target_dir}"
  vlog "action" "${action}"

  find "${source_dir}" -type f | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    vlog "target_file" "${target_file}"
  if [ "${action}" = "list" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          dlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
      elif [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
      else
        dlog "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          dlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
        continue
      elif [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      dlog "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        dlog "unlink" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "adopt" ]; then
      if [ -e "${target_file}" ]; then
        mv "${target_file}" "${source_file}"
        ln -sf "${source_file}" "${target_file}"
        dlog "adopt" "${target_file} -> ${source_file}"
      fi
    fi
  done
}

# ------------------------------
# main
# ------------------------------

if [ -x "$(command -v mise)" ]; then
  eval "$(mise activate --shims)"
fi

os_release

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

vlog "ID" ${ID}
vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

case ${1} in
init)
  tlog "reqs" "${ID}"
  # reqs
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"
  log "dotfiles initialized"
  ;;
list)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "list"
  ;;
adopt)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "adopt"
  ;;
unlink)
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "unlink"
  ;;
update)
  tlog "pull" "dotfiles"
  git -C ${DOTFILES} pull

  tlog "sync" "dotfiles"
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"

  brew_update
  mise_update
  update_completions
  ;;
*)
  # No command - show help
  ${0} --help
  exit 1
  ;;
esac
