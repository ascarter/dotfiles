#!/bin/sh

# set -x

DOTFILES=${DOTFILES:-${XDG_CONFIG_HOME:-$HOME/.config}/dotfiles}
DOTFILES_CONFIG_DIR=${DOTFILES}/config
TARGET=${TARGET:-$HOME}

source ${DOTFILES}/share/dotfiles/libdf.sh

usage() {
  log "Usage" "dotfiles [options] <subcommand>"
  log ""
  log "Subcommands:"
  log "  init" "Initialize dotfiles"
  log "  status" "Show configuration status"
  log "  sync" "Sync [package]"
  log "  uninstall" "Uninstall configuration"
  log "  update" "Update configuration"
  log ""
  log "Options:"
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

# Sync configuration files from source to target directory
# $1: source directory
# $2: target directory
# $3: action
#  status: check status
#  link: link source to target
#  unlink: unlink target
#  adopt: adopt target
sync() {
  source_dir="${1}"
  target_dir="${2}"
  action="${3}"

  vlog "source_dir" "${source_dir}"
  vlog "target_dir" "${target_dir}"
  vlog "action" "${action}"

  find "${source_dir}" -type f | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    if [ "${action}" = "status" ]; then
      if [ -L "${target_file}" ]; then
        dlog "exists" "${target_file} -> ${source_file}"
      elif [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
      else
        dlog "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -e "${target_file}" ]; then
        dlog "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      dlog "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        dlog "unlink" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "adopt" ]; then
      if [ -e "${target_file}" ]; then
        mv "${target_file}" "${source_file}"
        ln -sf "${source_file}" "${target_file}"
        dlog "adopt" "${target_file} -> ${source_file}"
      fi
    fi
  done
}

# dotfiles commands

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $(($OPTIND - 1))

vlog "ID" ${ID}
vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

# Handle subcommands and pass remaining paramters
if [ $# -eq 0 ]; then
  echo "No subcommand specified"
  echo ""
  usage
  exit 1
fi

subcommand=$1
shift

vlog "command" $subcommand
vlog "dotfiles" ${DOTFILES}
vlog "target" ${TARGET}

case ${subcommand} in
"init")
  tlog "prereqs" "${ID}"
  prereqs
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"

  log "dotfiles initialized"
  ;;
"status")
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "status"
  ;;
"sync")
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "adopt"
  ;;
"uninstall")
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "unlink"
  ;;
"update")
  git -C ${DOTFILES} pull
  sync "${DOTFILES_CONFIG_DIR}" "${TARGET}" "link"
  ;;
*) usage && exit 1 ;;
esac
