#!/bin/sh

# set -x

XDG_CONFIG_HOME=${XDG_CONFIG_HOME:-$HOME/.config}
XDG_DATA_HOME=${XDG_DATA_HOME:-$HOME/.local/share}

DOTFILES=${DOTFILES:-${XDG_DATA_HOME}/dotfiles}
DOTFILES_CONFIG_DIR=${DOTFILES}/cfg
DOTFILES_LIB_DIR=${DOTFILES}/lib

TARGET=${TARGET:-$HOME}
VERBOSE=0

log() {
  if [ "$#" -eq 1 ]; then
    printf "%s\n" "$1"
  elif [ "$#" -gt 1 ]; then
    printf "$(tput bold)%-10s$(tput sgr0)\t%s\n" "$1" "$2"
  fi
}

# verbose log
vlog() {
  if [ $VERBOSE -eq 1 ]; then
    log "$@"
  fi
}

usage() {
  log "dotfiles" "Configuration management tool using symlinks"
  log ""
  log "Usage:" "dotfiles [options] <command>"
  log ""
  log "Commands:" ""
  log "  status" "Show configuration status"
  log "  link" "Link configuration"
  log "  unlink" "Unlink configuration"
  log "  update" "Update dotfiles"
  log ""
  log "Options:" ""
  log "  -d" "dotfiles directory"
  log "  -t" "Target directory"
  log "  -v" "Verbose"
}

check_symlink() {
  # Try `realpath` (works on both macOS and Linux if installed)
  if command -v realpath >/dev/null 2>&1; then
    link_target=$(realpath "$1")
  else
    # Fallback to `readlink` for macOS and Linux
    link_target=$(cd "$(dirname "$1")" && cd "$(readlink "$1")" && pwd)
  fi
  if [ "$2" = "$link_target" ]; then
    return 0
  else
    return 1
  fi
}

# Sync configuration files from source to target directory
# $1: action
#  list: check status
#  link: link source to target
#  unlink: unlink target
sync() {
  source_dir="${DOTFILES_CONFIG_DIR}"
  target_dir="${TARGET}"
  action="${1}"

  find "${source_dir}" -type f | sort | while read -r source_file; do
    target_file="${target_dir}/${source_file#${source_dir}/}"
    if [ "${action}" = "list" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
      else
        log "missing" "${target_file} -> ${source_file}"
      fi
    elif [ "${action}" = "link" ]; then
      if [ -L "${target_file}" ]; then
        if check_symlink "${target_file}" "${source_file}"; then
          vlog "ok" "${target_file} -> ${source_file}"
        else
          err "invalid link ${target_file}"
        fi
        continue
      elif [ -e "${target_file}" ]; then
        log "conflict" "${target_file} -> ${source_file}"
        continue
      fi
      mkdir -p "$(dirname "${target_file}")"
      ln -sf "${source_file}" "${target_file}"
      log "link" "${target_file} -> ${source_file}"
    elif [ "${action}" = "unlink" ]; then
      if [ -L "${target_file}" ]; then
        rm "${target_file}"
        log "unlink" "${target_file} -> ${source_file}"
      fi
    fi
  done
}

# ------------------------------
# main
# ------------------------------

# Parse command line arguments
while getopts ":d:t:v" opt; do
  case $opt in
  d) DOTFILES=$OPTARG ;;
  t) TARGET=$OPTARG ;;
  v) VERBOSE=1 ;;
  \?) usage && exit 1 ;;
  esac
done
shift $((OPTIND - 1))

vlog "DOTFILES" ${DOTFILES}
vlog "TARGET" ${TARGET}

case ${1} in
status) sync "list" ;;
link)   sync "link" ;;
unlink) sync "unlink" ;;
update)
  git -C ${DOTFILES} pull
  sync "link"
  ;;
*)
  # No command - show help
  ${0} --help
  exit 1
  ;;
esac