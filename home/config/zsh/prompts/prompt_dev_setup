# developer zsh prompt theme
# Andrew Carter <ascarter@uw.edu>
#
# Developer prompt with Git information
#

prompt_dev_help () {
  cat <<'EOH'
Developer prompt with minimal vcs info (git branch and dirty state)

By default, this script provides a custom command prompt that includes information
about the git repository for the current folder. However, with certain large repositories,
this can result in a slow command prompt due to the performance of needed git operations.

For performance reasons, a "dirty" indicator that tells you whether or not there are
uncommitted changes is disabled by default. You can opt to turn this on for smaller repositories
by entering the following in a terminal or adding it to your postCreateCommand:

```
git config devcontainers-theme.show-dirty 1
```

To completely disable the git portion of the prompt for the current folder's repository,
you can use this configuration setting instead:

```
git config devcontainers-theme.hide-status 1
```

These settings are also valid for VS Code devcontainer and GitHub Codespaces.

EOH
}

prompt_dev_setup () {
  autoload -Uz vcs_info

  if [[ "$TERM" = "xterm-256color" ]]; then
    GIT_CLEAN=' ≡'
    GIT_DIRTY=' ✘'
    SEPARATOR=' ➜ '
    TRUNC_CHAR='…'
  else
    GIT_CLEAN=' ='
    GIT_DIRTY=' x'
    SEPARATOR=' | '
    TRUNC_CHAR='...'
  fi

  # colors: black, red, green, yellow, blue, magenta, cyan, white and default

  # Reset PROMPT
  PROMPT=

  # user@host
  if [[ -n ${SSH_TTY} ]]; then
    PROMPT+="%F{cyan}%n@%m${SEPARATOR}%f"
  fi

  # ~/working/directory
  PROMPT+="%F{blue}%40<${TRUNC_CHAR}<%3~%<<%f"

  # VCS info
  PROMPT+='%F{green}${vcs_info_msg_0_}%f'

  # Developer information
  PROMPT+='%F{magenta}${dev_info_msg}%f'

  # Input prompt
  PROMPT+=$' %# '
  PROMPT4='+%N:%i:%_>'

  prompt_opts=( cr percent subst sp )

  # Use misc when clean, staged to indicate dirty (allows different colors for each)
  +vi-dirty() {
    if [[ ! $(git config --bool devcontainers-theme.hide-status) == "true" && $(git config --bool devcontainers-theme.show-dirty) == "true" ]]; then
      if git --no-optional-locks ls-files --error-unmatch -m --directory --no-empty-directory -o --exclude-standard ":/*" > /dev/null 2>&1; then
        hook_com[staged]="$GIT_DIRTY"
      else
        hook_com[misc]="$GIT_CLEAN"
      fi
    fi
  }

  zstyle ':vcs_info:*' enable git
  zstyle ':vcs_info:git:*' check-for-changes false
  zstyle ':vcs_info:git:*' formats " %b%m%c"
  zstyle ':vcs_info:git:*' actionformats " %b%m%c|%a"
  zstyle ':vcs_info:git*+set-message:*' hooks dirty

  dev_info() {
    local ruby_version=
    local node_version=

    # Ruby version (via chruby)
    if [[ -n "${RUBY_VERSION}" ]]; then
      ruby_version="${RUBY_VERSION:+ ruby:}${RUBY_VERSION}"
    fi

    # Node.js version (via chnode)
    if [[ -n "${CHNODE_ROOT}" ]]; then
        node_version=${CHNODE_ROOT##*/}
        node_version=${node_version/-/:}
        node_version="${node_version:+ }${node_version}"
    fi

    typeset -g dev_info_msg="${ruby_version}${node_version}"
  }

  # Execute chruby_auto before each prompt
  if [[ $(whence -w 'chruby_auto' | cut -d ':' -f 2 | xargs) == function ]] && [[ ! "$precmd_functions" == *chruby_auto* ]]; then
    precmd_functions+=("chruby_auto")
  fi

  # Execute chnode_auto before each prompt
  if [[ $(whence -w 'chnode_auto' | cut -d ':' -f 2 | xargs) == function ]] && [[ ! "$precmd_functions" == *chnode_auto* ]]; then
    precmd_functions+=("chnode_auto")
  fi

  # Update vcs_info before each prompt
  if [[ $(whence -w 'vcs_info' | cut -d ':' -f 2 | xargs) == function ]] && [[ ! "$precmd_functions" == *vcs_info* ]]; then
    precmd_functions+=("vcs_info")
  fi

  # Update dev_info
  precmd_functions+=("dev_info")
}

prompt_dev_setup "$@"
